builder(creational)-is used to simplify a constructor with lots of parameters, creating an object step by step, and then returning it. Most parameters can remain unused in a constructor so its better not to have ugly constructors.
memento(behavioral)-lets you save the previous state of an object without revealing of its implementation. It has a createSnapshot method in exam object and restore snapshot. it also has a snapshot exam class. The EditorExam class has a history of snapshots and an exam. It also has an undo operation to revert to previous snapshot and a write method to set our exam and add a snapshot of it in the stateHistory. It is usefull to create memento to our exams because we might reschedule some exams and we should have the previous good dates in our memory.
bridge(structural)-lets you split a large class or a set of closely related classes into two separate hierarchies.The Bridge pattern is especially useful when dealing with cross-platform apps, supporting multiple types of database servers or working with several API providers of a certain kind (for example, cloud platforms, social networks, etc.). Basically our Database config
observer(behavioral)- is a behavioral design pattern that lets you define a subscription mechanism to notify multiple objects about any events that happen to the object theyâ€™re observing. I have a subscribed boolean in student, a function to subscribe to the faculty corespondence, and an update method to be notified. I also have a facultyCorespondence class with a list with the students subscribed to that. I also have a notifySubscribers method and an upload method. 
decorator(structural)-is a structural design pattern that lets you attach new behaviors to objects by placing these objects inside special wrapper objects that contain the behaviors. This decorator would be usefull to our room class because we should have the name of the room and other characteristics dependent on the type of the room.

